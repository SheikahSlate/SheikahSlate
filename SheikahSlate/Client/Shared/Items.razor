@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<div class="items">
@if (items is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (Item item in items)
    {
        <div class = "grid @(String.Format("grid{0}", item.Id))">
            <img src="Images/Items/@item.ImageFileName" @onmouseup="@(async e => await clickHandlerAsync(e, item))" oncontextmenu="return false;" width="32px" title="@item.Name"/>
            @if (item.Countable)
            {
                <div class = "item-label @(item.CurrentState == item.MaxState ? "item-maximized" : "")">
                    @item.Count
                </div>
            }
            @if (item.HelpText is not null)
            {
                <div class = "item-label">
                    @item.HelpText
                </div>
            }
        </div>
    }
}
</div>

@code {
    private IEnumerable<Item> items = Enumerable.Empty<Item>();
    private IDictionary<int, int> storedItemStates = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<Item>?> defaultItemsTask = Http.GetFromJsonAsync<IEnumerable<Item>>("/Api/Items");

        storedItemStates = await LocalStorage.GetItemAsync<IDictionary<int, int>>("Items");
        items = await defaultItemsTask ?? items;
        Console.WriteLine("Obtained items, merging...");
        if (storedItemStates is null)
        {
            storedItemStates = new Dictionary<int, int>();
        }
        else
        {
            foreach (KeyValuePair<int, int> storedItem in storedItemStates) {
                Item? item = items.FirstOrDefault(item => item.Id == storedItem.Key);
                if (item is not null) {
                    item.CurrentState = storedItem.Value;
				}
            }
        }
    }

    private async Task clickHandlerAsync(MouseEventArgs args, Item item) {
        switch (args.Button) {
            case 0: {
				item.CurrentState++;
                break;
            }
            case 2: {
				item.CurrentState--;
                break;
            }
        }
		storedItemStates[item.Id] = item.CurrentState;
		await LocalStorage.SetItemAsync("Items", storedItemStates);
    }
}
