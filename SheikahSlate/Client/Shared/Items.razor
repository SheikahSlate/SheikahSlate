@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<div class="items">
	@if (items is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<table class="item-table">
		@foreach (IGrouping<int, Item> row in items.OrderBy(item => item.GridColumn).GroupBy(item => item.GridRow).OrderBy(row => row.Key))
			{
				<tr>
					@foreach (Item item in row) {
						<td>
							<div class = "grid-item">
								<img src="Images/Items/@item.ImageFileName" @onmouseup="@(async e => await clickHandlerAsync(e, item))" oncontextmenu="return false;" width="32px" title="@item.Name"/>
								@if (item.Countable)
								{
									<div class = "item-label @(item.CurrentState == item.MaxState ? "item-maximized" : "")">
										@item.Count
									</div>
								}
								@if (item.HelpText is not null)
								{
									<div class = "item-label">
										@item.HelpText
									</div>
								}
							</div>
						</td>
					}
				</tr>
			}
		</table>
	}
</div>

@code {
    private IEnumerable<Item> items = Enumerable.Empty<Item>();
    private IDictionary<int, int> storedItemStates = new Dictionary<int, int>();

    private string GridLine(int start, int end) => String.Join(" ", Enumerable.Range(start, end - start).Select(i => String.Concat("grid", i)));

    protected override async Task OnInitializedAsync()
    {
        Task<IEnumerable<Item>?> defaultItemsTask = Http.GetFromJsonAsync<IEnumerable<Item>>("/Api/Items");

        storedItemStates = await LocalStorage.GetItemAsync<IDictionary<int, int>>("Items");
        items = await defaultItemsTask ?? items;
        Console.WriteLine("Obtained items, merging...");
        if (storedItemStates is null)
        {
            storedItemStates = new Dictionary<int, int>();
        }
        else
        {
            foreach (KeyValuePair<int, int> storedItem in storedItemStates) {
                Item? item = items.FirstOrDefault(item => item.Id == storedItem.Key);
                if (item is not null) {
                    item.CurrentState = storedItem.Value;
				}
            }
        }
    }

    private async Task clickHandlerAsync(MouseEventArgs args, Item item) {
        switch (args.Button) {
            case 0: {
				item.CurrentState++;
                break;
            }
            case 2: {
				item.CurrentState--;
                break;
            }
        }
		storedItemStates[item.Id] = item.CurrentState;
		await LocalStorage.SetItemAsync("Items", storedItemStates);
    }
}
